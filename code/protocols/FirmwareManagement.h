#include <Uefi.h>
#include <Protocol/FirmwareManagement.h>

typedef EFI_STATUS(EFIAPI *EFI_FIRMWARE_MANAGEMENT_PROTOCOL_GET_IMAGE_INFO)(
    IN EFI_FIRMWARE_MANAGEMENT_PROTOCOL *This,
    IN OUT UINTN *ImageInfoSize,
    IN OUT EFI_FIRMWARE_IMAGE_DESCRIPTOR *ImageInfo,
    OUT UINT32 *DescriptorVersion,
    OUT UINT8 *DescriptorCount,
    OUT UINTN *DescriptorSize,
    OUT UINT32 *PackageVersion,
    OUT CHAR16 **PackageVersionName);

typedef EFI_STATUS(EFIAPI *EFI_FIRMWARE_MANAGEMENT_PROTOCOL_GET_IMAGE)(
    IN EFI_FIRMWARE_MANAGEMENT_PROTOCOL *This,
    IN UINT8 ImageIndex,
    OUT VOID *Image,
    IN OUT UINTN *ImageSize);

typedef EFI_STATUS(EFIAPI *EFI_FIRMWARE_MANAGEMENT_PROTOCOL_SET_IMAGE)(
    IN EFI_FIRMWARE_MANAGEMENT_PROTOCOL *This,
    IN UINT8 ImageIndex,
    IN CONST VOID *Image,
    IN UINTN ImageSize,
    IN CONST VOID *VendorCode,
    IN EFI_FIRMWARE_MANAGEMENT_UPDATE_IMAGE_PROGRESS Progress,
    OUT CHAR16 **AbortReason);

struct _EFI_FIRMWARE_MANAGEMENT_PROTOCOL
{
  EFI_FIRMWARE_MANAGEMENT_PROTOCOL_GET_IMAGE_INFO GetImageInfo;
  EFI_FIRMWARE_MANAGEMENT_PROTOCOL_GET_IMAGE GetImage;
  EFI_FIRMWARE_MANAGEMENT_PROTOCOL_SET_IMAGE SetImage;
  EFI_FIRMWARE_MANAGEMENT_PROTOCOL_CHECK_IMAGE CheckImage;
  EFI_FIRMWARE_MANAGEMENT_PROTOCOL_GET_PACKAGE_INFO GetPackageInfo;
  EFI_FIRMWARE_MANAGEMENT_PROTOCOL_SET_PACKAGE_INFO SetPackageInfo;
};

extern EFI_GUID gEfiFirmwareManagementProtocolGuid;